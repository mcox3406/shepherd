"""
Visualize detailed results from ShEPhERD inference scaling experiments.

Reads the 'all_molecules_log.csv' file generated by run_inference_scaling_experiment.py
and produces plots analyzing score distributions, progress over time, property trade-offs,
and chemical diversity.
"""

import os
import sys
import argparse
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import logging

from rdkit import Chem, DataStructs
from rdkit.Chem import AllChem


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

sns.set_theme(style="whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['figure.dpi'] = 100


def load_data(experiment_dir):
    """load the all_molecules_log.csv file."""
    log_file = experiment_dir / "all_molecules_log.csv"
    if not log_file.exists():
        logging.error(f"Log file not found: {log_file}")
        return None
    
    try:
        df = pd.read_csv(log_file)
        # add a cumulative evaluation counter
        df['evaluation'] = range(1, len(df) + 1)
        logging.info(f"Loaded {len(df)} records from {log_file}")
        return df
    except Exception as e:
        logging.error(f"Error loading data from {log_file}: {e}")
        return None

def create_output_dir(experiment_dir):
    """Create the analysis output directory."""
    output_dir = experiment_dir / "analysis"
    output_dir.mkdir(exist_ok=True)
    logging.info(f"Saving analysis results to: {output_dir}")
    return output_dir

def plot_score_distributions(df, output_dir):
    """Plot histograms of SA, cLogP, and combined scores."""
    logging.info("Plotting score distributions...")
    fig, axes = plt.subplots(1, 3, figsize=(18, 5))
    
    sns.histplot(df['sa_score'], kde=True, ax=axes[0], bins=20)
    axes[0].set_title('SA Score Distribution')
    axes[0].set_xlabel('SA Score')
    
    sns.histplot(df['clogp_score'], kde=True, ax=axes[1], bins=20)
    axes[1].set_title('cLogP Score Distribution')
    axes[1].set_xlabel('cLogP Score')
    
    sns.histplot(df['combined_score'], kde=True, ax=axes[2], bins=20)
    axes[2].set_title('Combined Score Distribution')
    axes[2].set_xlabel('Combined Score')
    
    plt.tight_layout()
    plot_path = output_dir / "score_distributions.png"
    plt.savefig(plot_path)
    plt.close(fig)
    logging.info(f"Saved score distributions plot to {plot_path}")

def plot_score_vs_evaluation(df, output_dir):
    """Plot combined score vs. evaluation number and score distribution."""
    logging.info("Plotting score vs. evaluation and distribution...")

    fig, axes = plt.subplots(2, 1, figsize=(10, 10), sharex=False) # sharex=False as x-axes are different
    
    # scatter plot of score vs. evaluation
    ax1 = axes[0]
    ax1.scatter(df['evaluation'], df['combined_score'], alpha=0.5, s=10) 
    
    # highlight best score found
    best_idx = df['combined_score'].idxmax()
    ax1.scatter(df.loc[best_idx, 'evaluation'], df.loc[best_idx, 'combined_score'], 
               color='r', marker='*', s=200, label=f"Best: {df.loc[best_idx, 'combined_score']:.4f}")
               
    ax1.set_title('Combined Score vs. Evaluation Number')
    ax1.set_ylabel('Combined Score')
    ax1.legend()
    ax1.grid(True)

    # histogram of combined scores
    ax2 = axes[1]
    sns.histplot(df['combined_score'], kde=True, ax=ax2, bins=30)
    ax2.set_title('Distribution of Combined Scores')
    ax2.set_xlabel('Combined Score')
    ax2.set_ylabel('Frequency')

    plt.tight_layout()
    
    plot_path = output_dir / "score_vs_evaluation_and_distribution.png"
    plt.savefig(plot_path)
    plt.close(fig)
    logging.info(f"Saved score vs. evaluation plot to {plot_path}")

def plot_sa_vs_clogp(df, output_dir):
    """Plot SA score vs. cLogP score, colored by combined score."""
    logging.info("Plotting SA score vs. cLogP score...")
    fig, ax = plt.subplots()
    
    scatter = ax.scatter(df['sa_score'], df['clogp_score'], c=df['combined_score'], 
                         cmap='viridis', alpha=0.6, s=15)
                         
    # add colorbar
    cbar = fig.colorbar(scatter)
    cbar.set_label('Combined Score')
    
    ax.set_title('SA Score vs. cLogP Score Trade-off')
    ax.set_xlabel('SA Score')
    ax.set_ylabel('cLogP Score')
    ax.grid(True, alpha=0.3)

    plot_path = output_dir / "sa_vs_clogp.png"
    plt.savefig(plot_path)
    plt.close(fig)
    logging.info(f"Saved SA vs. cLogP plot to {plot_path}")

def plot_chemical_diversity(df, output_dir):
    """Calculate and plot pairwise Tanimoto similarity distribution."""
        
    logging.info("Calculating chemical diversity (this may take a while)...")
    
    # filter out invalid SMILES
    valid_smiles = df['smiles'][df['smiles'].notna() & 
                              ~df['smiles'].str.contains("error", case=False)].tolist()
    
    if len(valid_smiles) < 2:
        logging.warning("Not enough valid SMILES found to calculate diversity.")
        return

    mols = [Chem.MolFromSmiles(s) for s in valid_smiles]
    mols = [m for m in mols if m is not None]

    if len(mols) < 2:
        logging.warning("Not enough valid RDKit molecules created to calculate diversity.")
        return
        
    fps = [AllChem.GetMorganFingerprintAsBitVect(m, 2, nBits=2048) for m in mols]
    similarities = []
    num_fps = len(fps)
    for i in range(num_fps):
        for j in range(i + 1, num_fps):
            sim = DataStructs.TanimotoSimilarity(fps[i], fps[j])
            similarities.append(sim)
            
    if not similarities:
        logging.warning("Could not compute any similarities.")
        return

    fig, ax = plt.subplots()
    sns.histplot(similarities, kde=False, bins=50, ax=ax)
    mean_sim = np.mean(similarities)
    ax.axvline(mean_sim, color='r', linestyle='--', label=f'Mean: {mean_sim:.3f}')
    ax.set_title(f'Pairwise Tanimoto Similarity (Morgan FP, n={len(similarities)})')
    ax.set_xlabel('Tanimoto Similarity')
    ax.set_ylabel('Frequency')
    ax.legend()
    
    plot_path = output_dir / "tanimoto_similarity_distribution.png"
    plt.savefig(plot_path)
    plt.close(fig)
    logging.info(f"Saved Tanimoto similarity plot to {plot_path}")


def main():
    parser = argparse.ArgumentParser(description='Visualize detailed ShEPhERD inference scaling results.')
    parser.add_argument('experiment_dir', type=str, 
                        help='Path to the specific experiment results directory (e.g., inference_scaling_experiments/my_experiment_name)')
    args = parser.parse_args()

    experiment_path = Path(args.experiment_dir).resolve()
    
    if not experiment_path.is_dir():
        logging.error(f"Experiment directory not found: {experiment_path}")
        sys.exit(1)

    df = load_data(experiment_path)
    if df is None:
        sys.exit(1)

    output_dir = create_output_dir(experiment_path)

    plot_score_distributions(df, output_dir)
    plot_score_vs_evaluation(df, output_dir)
    plot_sa_vs_clogp(df, output_dir)
    plot_chemical_diversity(df, output_dir)
    
    logging.info("Visualization script finished.")

if __name__ == "__main__":
    main() 